<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">
	<!-- 载入jdbc.properties配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">    
        <property name="location" value="classpath:jdbc.properties" />    
    </bean> 
    <!-- 连接池，连接数据库 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
			<property name="driverClassName" value="${driverClassName}"></property>
			<property name="url" value="${url}"></property>
			<property name="username" value="${username}"></property>
			<property name="password" value="${password}"></property>
	</bean>
	
	<!-- 1.配置SecurityManager-->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="cacheManager"></property>
		<!-- 一个realm的时候，就用属性<property name="realm" ref="myRealm"/> --> 
		<!-- 多个realm的时候， 可以用-->
		<property name="authenticator" ref="authenticator"></property>
		<property name="realms">
			<list>
				
				<ref bean="myRealm"/>
			</list>
		</property>
	</bean>
	<!-- 2.配置cacheManager-->
	<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"></bean>  
	<!-- 3配置authenticator -->
	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		
		<!-- 可以修改多个realm之间的匹配策略，
		FirstSuccessfulStrategy：只要有一个Realm验证成功即可，只返回第一个Realm身份验证成功的认证信息，其他的忽略；
		默认 AtLeastOneSuccessfulStrategy:只要有一个Realm验证成功即可，和FirstSuccessfulStrategy不同，返回所有Realm身份验证成功的认证信息；
		AllSuccessfulStrategy：所有Realm验证成功才算成功，且返回所有 Realm身份验证成功的认证信息，
		如果有一个失败就失败了。 -->
		<property name="authenticationStrategy">
			<bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"></bean>
		</property>
		
	</bean>
	
	<!-- 3.1配置realm -->
	<bean id="myRealm" class="com.wbb.shiro.realms.MyRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5"></property><!-- 加密方式 -->
				<property name="hashIterations" value="1024"></property><!-- 加密次数 -->
			</bean>
		</property>
	</bean>
	<bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
		<property name="dataSource" ref="dataSource"></property>
		
		
	</bean>
	<!-- 4.配置LifecycleBeanPostProcessor,可以自动的来调用配置在Spring IOC容器中shiro bean的生命周期方法 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor">
	</bean>
	
	<!-- 5.启动呢IOC容器中使用Shiro的注解，但是必须配置在LifecycleBeanPostProcessor之后，才能使用 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
	  depends-on="lifecycleBeanPostProcessor">
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"></property>
	</bean>
	
	<!-- 6. 配置 ShiroFilter. 
		6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 
		的 <filter-name> 一致. 若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 
		IOC 容器中查找和 <filter-name> 名字对应的 filter bean. -->
		<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
			<property name="securityManager" ref="securityManager"></property>
			<property name="loginUrl" value="/login.jsp"></property>
			<property name="successUrl" value="/"></property>
			<property name="unauthorizedUrl" value="/unauthorized.jsp"></property>
			
		<!-- 配置哪些页面需要受保护. 以及访问这些页面需要的权限. 
		1). anon(anonymous) 可以被匿名访问 2). authc(authentication) 
		必须认证(即登录)后才可能访问的页面. 3). logout 登出. -->
		<property name="filterChainDefinitions">
			<value>
				/login.jsp=anon
				/login=anon
				/logout=logout
				/test.jsp=anon
				/getTree=anon
				/user/select.jsp=perms[user:select]
				#表示其他所有的url都需要认证
				/** = authc
			</value>
		</property>	
		</bean>
		<bean id="shiroService" class="com.wbb.shiro.service.ShiroService"></bean>
		<import resource="mybatis.xml"/>
</beans>
